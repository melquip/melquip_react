/* CUSTOM FUNCTIONS */
/* ------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------ */
/* customFunctions.styl */
/* ------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------ */


/* FONTS */

$font_cache = {
	'1': { replacements: '', thin: '', lighter: '', light: '', regular: '', medium: '', semibold: '', bold: '', bolder: '', black: '', },
	'2': { replacements: '', thin: '', lighter: '', light: '', regular: '', medium: '', semibold: '', bold: '', bolder: '', black: '', },
	'3': { replacements: '', thin: '', lighter: '', light: '', regular: '', medium: '', semibold: '', bold: '', bolder: '', black: '', },
	'4': { replacements: '', thin: '', lighter: '', light: '', regular: '', medium: '', semibold: '', bold: '', bolder: '', black: '', },
	'5': { replacements: '', thin: '', lighter: '', light: '', regular: '', medium: '', semibold: '', bold: '', bolder: '', black: '', },
}

/*
$others = ''
$thin = ''
$thin2 = ''
$lighter = ''
$lighter2 = ''
$light = ''
$light2 = ''
$regular = ''
$regular2 = ''
$medium = ''
$medium2 = ''
$bold = ''
$bold2 = ''
$bolder = ''
$bolder2 = ''
$black = ''
$black2 = ''
$font-types ='thin' $thin,'lighter' $lighter,'light' $light,'regular' $regular,'medium' $medium,'bold' $bold,'bolder' $bolder,'black' $black,'thin2' $thin2,'lighter2' $lighter2,'light2' $light2,'regular2' $regular2,'medium2' $medium2,'bold2' $bold2,'bolder2' $bolder2,'black2' $black2
*/


	
set-font($type, $font)
	search-font($type, $font, 'set')

search-font($type, $font = '', $get = 'get')
	if !match('2|3|4|5', $type)
		if $get == 'get'
			return ($font_cache['1'][$type] $font_cache['1'][replacements])
		else
			$font_cache['1'][$type] = $font
	else
		if match('2', $type)
			if $get == 'get'
				return ($font_cache['2'][replace('2','',$type)] $font_cache['2'][replacements])
			else
				$font_cache['2'][replace('2','',$type)] = $font
		if match('3', $type)
			if $get == 'get'
				return ($font_cache['3'][replace('3','',$type)] $font_cache['3'][replacements])
			else
				$font_cache['3'][replace('3','',$type)] = $font
		if match('4', $type)
			if $get == 'get'
				return ($font_cache['4'][replace('4','',$type)] $font_cache['4'][replacements])
			else
				$font_cache['4'][replace('4','',$type)] = $font
		if match('5', $type)
			if $get == 'get'
				return ($font_cache['5'][replace('5','',$type)] $font_cache['5'][replacements])
			else
				$font_cache['5'][replace('5','',$type)] = $font
			
		
				
writeFont($type, $inline=0)
	$get = search-font($type)
	if $get[0] != ''
		if $inline
			if $get[1] != ''
				font-family $get[0], $get[1]
			else
				font-family $get[0]
		else
			.{$type}
				if $get[1] != ''
					font-family $get[0], $get[1]!important
				else
					font-family $get[0]!important


/*writeFont($fontType, $inline = 0)
	$font-types ='thin' $thin,'lighter' $lighter,'light' $light,'regular' $regular,'medium' $medium,'bold' $bold,'bolder' $bolder,'black' $black,'thin2' $thin2,'lighter2' $lighter2,'light2' $light2,'regular2' $regular2,'medium2' $medium2,'bold2' $bold2,'bolder2' $bolder2,'black2' $black2
	for $fontPair in $font-types
		if $fontPair[0] == $fontType and $fontPair[1] != ''
			$class = unquote($fontPair[0])
			$font = $fontPair[1]
			if $inline == 1
				font-family $font, $others
			else
				.{$class}
					font-family $font, $others!important*/

					
regFont($name, $type, $sourcePath = '../fonts/*', $extensions = 'woff2' 'woff', $write_mode = true)
	set-font($type, $name)
	if $write_mode
		@font-face
			font-family $name
			$fullPath = ''
			for $extension in $extensions
				$extension1 = $extension
				$extension1 = "ttf" unless $extension != "truetype"
				$fullPath += 'url("' + $sourcePath + '.' + $extension1 + '") format("' + $extension + '")'
				unless $extension == $extensions[length($extensions)-1]
					$fullPath += ', '
			src unquote($fullPath)
			font-weight normal
			font-style normal

regOtherFonts($replacements, $fontLevel = '1')
	$font_cache[$fontLevel][replacements] = unquote($replacements)
	if $fontLevel == '1'
		$font_cache['2'][replacements] = unquote($replacements) unless $font_cache['2'][replacements] != ''
		$font_cache['3'][replacements] = unquote($replacements) unless $font_cache['3'][replacements] != ''
		$font_cache['4'][replacements] = unquote($replacements) unless $font_cache['4'][replacements] != ''
		$font_cache['5'][replacements] = unquote($replacements) unless $font_cache['5'][replacements] != ''
	if $fontLevel == '2'
		$font_cache['3'][replacements] = unquote($replacements) unless $font_cache['3'][replacements] != ''
		$font_cache['4'][replacements] = unquote($replacements) unless $font_cache['4'][replacements] != ''
		$font_cache['5'][replacements] = unquote($replacements) unless $font_cache['5'][replacements] != ''
	if $fontLevel == '3'
		$font_cache['4'][replacements] = unquote($replacements) unless $font_cache['4'][replacements] != ''
		$font_cache['5'][replacements] = unquote($replacements) unless $font_cache['5'][replacements] != ''
	if $fontLevel == '4'
		$font_cache['5'][replacements] = unquote($replacements) unless $font_cache['5'][replacements] != ''

/*regFont($name = '', $sourcePath = '../fonts!*', $extensions = 'woff2' 'woff')
	@font-face 
		font-family $name
		$fullPath = ''
		for extension in $extensions
			$fullPath += 'url("' + $sourcePath + '.' + extension + '") format("' + extension + '")'
			unless extension == $extensions[length($extensions)-1]
				$fullPath += ', '
		src unquote($fullPath)
		font-weight normal
		font-style normal*/


containers($first, $options, $center = false)
	if $center
		display block unless @display
		margin 0 auto unless @margin
		position relative unless @position
		z-index 1 unless @z-index
	max-width defaultUnit($first) unless @max-width
	for $pair in $options
		$pair0 = defaultUnit($pair[0])
		$pair1 = defaultUnit($pair[1])
		+media($pair0)
			max-width $pair1


/* VARIABLES */
validFontStyle = normal italic oblique
validFontVariant = small-caps titling-caps sub super unicase petite-caps all-petite-caps all-small-caps fvnone
validTextAlign = left right center justify
validTextTransform = uppercase lowercase capitalize full-width ttnone
validTextDecoration = underline overline line-through tdnone
validFontWeight = 100 200 300 400 500 600 700 800 900 lighter bold bolder fwnormal
validColor = 'rgb' 'rgba' 'hsl' 'hsla' 'hex' transparent currentcolor black silver gray white maroon red purple fuchsia green lime olive yellow navy blue teal aqua orange aliceblue antiquewhite aquamarine azure beige bisque blanchedalmond blueviolet brown burlywood cadetblue chartreuse chocolate coral cornflowerblue cornsilk crimson cyan aqua darkblue darkcyan darkgoldenrod darkgray darkgreen darkgrey darkkhaki darkmagenta darkolivegreen darkorange darkorchid darkred darksalmon darkseagreen darkslateblue darkslategray darkslategrey darkturquoise darkviolet deeppink deepskyblue dimgray dimgrey dodgerblue firebrick floralwhite forestgreen gainsboro ghostwhite gold goldenrod greenyellow grey honeydew hotpink indianred indigo ivory khaki lavender lavenderblush lawngreen lemonchiffon lightblue lightcoral lightcyan lightgoldenrodyellow lightgray lightgreen lightgrey lightpink lightsalmon lightseagreen lightskyblue lightslategray lightslategrey lightsteelblue lightyellow limegreen linen magenta fuchsia mediumaquamarine mediumblue mediumorchid mediumpurple mediumseagreen mediumslateblue mediumspringgreen mediumturquoise mediumvioletred midnightblue mintcream mistyrose moccasin navajowhite oldlace olivedrab orangered orchid palegoldenrod palegreen paleturquoise palevioletred papayawhip peachpuff peru pink plum powderblue rosybrown royalblue saddlebrown salmon sandybrown seagreen seashell sienna skyblue slateblue slategray slategrey snow springgreen steelblue tan thistle tomato turquoise violet wheat whitesmoke yellowgreen rebeccapurple
invalidAllowedValues = fvnone ttnone tdnone wwnormal wbnormal wsnormal fwnormal
/*validFonts = 'thin lighter light regular medium semibold bold bolder black'*/
validWordWrap = wwnormal break-word
validWordBreak = wbnormal break-all keep-all
validWhiteSpace = wsnormal nowrap pre pre-line pre-wrap
/*
ADD word-wrap, word-break, white-space, word-spacing
*/


$primary-color = #000
$facebook = #3B5998
$twitter = #00ACED
$gplus = #D34836
$instagram = #BC2A8D
$youtube = #E52D27

/* CACHE MEDIA QUERIES */
$query_cache = {}
$query_aliases = {
	mobileS: 	'min-width: 320px',/* 320x480 */
	mobileM: 	'min-width: 360px',/* 360x640 */
	mobileLS:	'min-width: 480px',/* 480x320 */
	tablet: 	'min-width: 720px',/* 720x1024 */
	tabletL: 	'min-width: 768px',/* 768x1024 */
	laptopS:	'min-width: 1024px',/* 1024x720 */
	HD:			'min-width: 1280px',/* 1280x768 */
	laptopM:	'min-width: 1366px',/* 1366x768 */
	laptopL:	'min-width: 1440px',/* 1440x900 */
	FHD:		'min-width: 1920px',/* 1920x1080 */
	F4K: 		'min-width: 2160px',/* 2160x1440 */
}

media-helper($condition, $selector)
	if $condition is a 'unit'
		if !unit($condition)
			$condition = unit($condition, 'px')
		$condition = 'min-width: ' + $condition
	$condition = unquote($query_aliases[$condition] or $condition)
	$condition = '(%s)' % $condition unless match('\(', $condition)
	unless $query_cache[$condition]
		$query_cache[$condition] = {}
	unless $query_cache[$condition][$selector]
		$query_cache[$condition][$selector] = ()
	push($query_cache[$condition][$selector], block)
	
media($condition)
	+media-helper($condition, selector() + "")
		{block}
		
apply_media_cache()
	for $query, $selectors in $query_cache
		$query = unquote($query_aliases[$query] or $query)
		$query = '(%s)' % $query unless match('\(', $query)
		$query = 'only screen and %s' % $query
		@media $query
			for $selector, $block in $selectors
				{$selector}
					for $property in $block
						{$property}
						
/* CROSS BROWSER FUNCTIONS */
/*
CONFIG = support-for-ie
*/
$flexRatio = {
	one: 	1,
	two: 	2,
	three: 	3,
	four: 	4,
	five: 	5,
	six: 	6,
	seven: 	7,
	eight: 	8,
	nine: 	9,
	ten: 	10,
	eleven:	11,
	twelve:	12,
}
$flexCol = {
	one: 	round(unit(100 / 1, '%'), 4),
	two: 	round(unit(100 / 2, '%'), 4),
	three: 	round(unit(100 / 3, '%'), 4),
	four: 	round(unit(100 / 4, '%'), 4),
	five: 	round(unit(100 / 5, '%'), 4),
	six: 	round(unit(100 / 6, '%'), 4),
	seven: 	round(unit(100 / 7, '%'), 4),
	eight: 	round(unit(100 / 8, '%'), 4),
	nine: 	round(unit(100 / 9, '%'), 4),
	ten: 	round(unit(100 / 10, '%'), 4),
	eleven:	round(unit(100 / 11, '%'), 4),
	twelve:	round(unit(100 / 12, '%'), 4),
}
/*
 improvements can be made
 if support-for-ie
	max-width unquote( 'calc(' + $resolved_basis + ' - 4px)\9' ) unless $resolved_basis is a 'literal'
*/
flexible($basis, $space = null, $grow = 1, $shrink = 1)
	$resolved_basis = null
	
	if $basis is a 'string'
		$resolved_basis = unquote($basis)
	
	$resolved_basis = $flexCol[$basis] or $basis
	
	if $resolved_basis == $flexCol[$basis] and $flexRatio[$basis] != 1 and $space is a 'unit'
		$ratio = $flexRatio[$basis]
		$space = defaultUnit(round((($space*($ratio - 1)) / $ratio), 2))
		$resolved_basis = unquote('calc(' + $resolved_basis + ' - ' + $space + ')')
		
	flex $grow $shrink $resolved_basis
	max-width $resolved_basis
	
	
simplify($measure, $screenWidth, $valUnit = '%')
	$result = ((($measure) * 100) / ($screenWidth))
	$result = round(unit($result, unquote($valUnit)), 4)
	return $result

proportional($_1, $_2, $_3)
	$result = ((($_1) / ($_2)) * ($_3))
	$result = floor(unit($result, 'px'))
	return $result

simpleCalc($measure, $screenWidth)
	return unquote('calc((('+unit($measure,'%')+')*100)/('+$screenWidth+'))')

	
unfocus($value)
	$value = unit($value, 'px')
	-webkit-filter blur($value)
	-moz-filter blur($value)
	-ms-filter blur($value)
	-o-filter blur($value)
	filter blur($value)
	
/*
SUPPORT FOR IE 10? IE11 IS OK --> rule out IE9...

	if support-for-ie
		display unquote('table\9')
		.column
			width 100%
			if support-for-ie
				display unquote('inline-block\9')
				vertical-align unquote('top\9')
*/
custom-reset()
	.flex
		width 100%
		display flex
		flex-flow row wrap
		align-items flex-start
		justify-content space-between
		&.one > .column
			flexible(one)
		&.two > .column
			flexible(two)
		&.three > .column
			flexible(three)
		&.four > .column
			flexible(four)
		&.five > .column
			flexible(five)
		&.six > .column
			flexible(six)
		&.seven > .column
			flexible(seven)
		&.eight > .column
			flexible(eight)
		&.nine > .column
			flexible(nine)
		&.ten > .column
			flexible(ten)
			
		+media(320)
			/* */
		+media(360)
			/* */
		+media(480)
			/* */
		+media(720)
			/* */
		+media(768)
			/* */
		+media(1024)
			/* */
		+media(1280)
			/* */
		+media(1366)
			/* */
		+media(1440)
			/* */
		+media(1920)
			/* */
		+media(2160)
			/* */
	
	*
		margin 0
		padding 0
		border 0
		outline none
		box-sizing border-box
		-webkit-tap-highlight-color transparent
		-webkit-smoothing antialiased
		-moz-osx-smoothing grayscale
	*:before, *:after
		box-sizing border-box
	h1, h2, h3, h4, h5, h6
		font-weight normal
	img
		display block
		max-width 100%
	a
		text-decoration none
	a, a:hover, a span
		cursor pointer
	ul, li
		list-style none
	html
		text-size-adjust 100%
	html, body
		width 100%
		min-height 100%
			
	writeFont('thin', 0)
	writeFont('lighter', 0)
	writeFont('light', 0)
	writeFont('regular', 0)
	writeFont('medium', 0)
	writeFont('semibold', 0)
	writeFont('bold', 0)
	writeFont('bolder', 0)
	writeFont('black', 0)
	writeFont('thin2', 0)
	writeFont('lighter2', 0)
	writeFont('light2', 0)
	writeFont('regular2', 0)
	writeFont('medium2', 0)
	writeFont('semibold2', 0)
	writeFont('bold2', 0)
	writeFont('bolder2', 0)
	writeFont('black2', 0)
	
	body
		width 100%
		position relative
		background-color #FFFFFF
		f 10px, 1em, left normal $primary-color 'regular'
		
	section, header, footer
		writeFont('regular', 1)
		position relative
		z-index 1
		
	input[type="number"]
		-moz-appearance textfield!important
		&::-webkit-inner-spin-button, &::-webkit-outer-spin-button
			appearance none!important

t()
	if arguments is not null
		for $option, $index in arguments
			if $option in validTextAlign
				text-align $option
				return true
			if $option in validTextTransform
				if $option in invalidAllowedValues
					text-transform none
				else
					text-transform $option
				return true
			if $option in validTextDecoration
				if $option in invalidAllowedValues
					text-decoration none
				else
					text-decoration $option
				return true
			if $option in validFontStyle
				font-style $option
				return true
			if $option in validFontVariant
				if $option in invalidAllowedValues
					font-variant none
				else
					font-variant $option
				return true
			if $option in validWordWrap
				if $option in invalidAllowedValues
					word-wrap normal
				else
					word-wrap $option
				return true
			if $option in validWordBreak
				if $option in invalidAllowedValues
					word-break normal
				else
					word-break $option
				return true
			if $option in validWhiteSpace
				if $option in invalidAllowedValues
					white-space normal
				else
					white-space $option
				return true
			if $option in validFontWeight and (($option is a 'unit' and !unit($option)) or typeof($option) == 'ident')
				if $option in invalidAllowedValues
					font-weight normal
				else
					font-weight $option
				return true
			if $option is a 'unit' and unit($option)
				letter-spacing $option
				return true
			if $option in validColor or typeof($option) in validColor
				color $option
				return true
			if $option is a 'string'
				writeFont($option, 1)
				
/*$option = replace('2', '', $option)
$option = replace('3', '', $option)
$option = replace('4', '', $option)
if match($option, validFonts)*/

fixLineHeightSafari($h, $opt = false, $lh = false)
	line-height 0 unless $lh == false
	&:after
		content ''
		height $h
		display inline-block
		vertical-align middle
		for $pair in $options
			$pair0 = defaultUnit($pair[0])
			$pair1 = defaultUnit($pair[1])
			+media($pair0)
				height $pair1
		
		
f()
	if arguments[0] is a 'unit' and arguments[1] is a 'unit'
		txt(arguments[0], arguments[1], arguments[2])
	else
		t(arguments)
		
txt($fz = null, $lh = null, $opts = null)
	font-size defaultUnit($fz) unless $fz is null
	line-height defaultUnit($lh) unless $lh is null
	t($opts) unless $opts is null

-space(type, args)
	i = 0
	type = unquote(type)
	validPositions = top right bottom left
	if args[0] in validPositions
		if length(args) == 8
			$getTop = 0
			$getRight = 0
			$getBottom = 0
			$getLeft = 0
			for arg in args
				if arg in validPositions
					if arg == validPositions[0]
						$getTop = args [ index(args, arg) + 1 ]
					if arg == validPositions[1]
						$getRight = args [ index(args, arg) + 1 ]
					if arg == validPositions[2]
						$getBottom = args [ index(args, arg) + 1 ]
					if arg == validPositions[3]
						$getLeft = args [ index(args, arg) + 1 ]
			if $getLeft == $getRight and $getTop != $getBottom
				{type}: $getTop $getRight $getBottom
			else 
				if $getLeft == $getRight and $getTop == $getBottom
					{type}: $getTop $getRight
				else
					{type}: $getTop $getRight $getBottom $getLeft
				
		else
			for j in (1..8)
				if length(args) > i
					{type}-{args[i]}: (args[i + 1] is a 'unit' or args[i + 1] is a 'ident' or args[i + 1] is a 'literal') ? args[i += 1] : 0
				i += 1
	else 
		{type}: args
		
margin()
	-space('margin', arguments)
padding()
	-space('padding', arguments)
-m()
	-space('margin', arguments)
-p()
	-space('padding', arguments)
	
	
defaultTransition($time = .2s, $animation = ease-in-out, $delay = 0s)
	transition all $time $animation $delay
	
	
validPositions = static relative absolute fixed sticky
validVerticalAlign = top middle bottom baseline sub super text-top text-bottom
validVisibility = hidden visible colapse
validBlockAlign = left center right
validDisplay = inline block inline-block list-item run-in compact marker table inline-table table-row-group table-header-group table-footer-group table-row table-column-group table-column table-cell table-caption none
validExtensions = '.' '.png' '.jpg' '.gif' '.svg'

/*
background-size
background-repeat
background-position?x
background-attachment

*/
validBgSize = cover contain
validBgRepeat = no-repeat repeat repeat-x repeat-y
validBgAttachment = fixed scroll
/*

usage :
b: relative block middle hidden center 0.3 #000 cover no-repeat fixed scroll

*/
b()
	if arguments is not null
		_is_inlblock = false
		_written_position = false
		_written_display = false
		for $option in arguments
			if $option in validColor or typeof($option) in validColor
				background-color $option
			if $option in validBgSize
				background-size $option
			if $option in validBgRepeat
				background-repeat $option
			if $option in validBgAttachment
				background-attachment $option
			if $option in validPositions and !_written_position
				position $option
				_written_position = true
			if $option in validDisplay and !_written_position
				display $option
				_written_position = true
				_is_inlblock = ($option == inline-block)
			if $option in validVerticalAlign and _is_inlblock
				vertical-align $option
			if $option in validVisibility
				visibility $option
			/*if $option in validBlockAlign and !_is_inlblock
				if !_written_position
					display block
					_written_position = true
				if $option == left
					margin-right auto
				if $option == center
					margin-left auto
					margin-right auto
				if $option == right
					margin-left auto*/
			if $option is a 'unit' and !unit($option)
				opacity $option
				
			/*if $option is a 'string' or (typeof($option) is 'ident' and !$option in validPositions and !$option in validVerticalAlign and !$option in validVisibility and !$option in validBlockAlign and !$option in validDisplay)
				if match($option, validExtensions)
					background-image url($option)
				else
					background-image $option*/

defaultUnit($measure, $unit = 'px')
	if !unit($measure)
		return unit($measure, $unit)
	else
		return $measure
		

/*
-move(x = null,y = null,z = null, accelarate = false)
	value = '' !* default *!
	if !accelarate and support-for-ie
		if x is not null and y is not null and z is null
			value = 'translate('+x+','+y+') '
		else
			if x is not null
				value += 'translateX('+x+') '
			if y is not null
				value += 'translateY('+y+') '
		if z is not null
			value += 'translateZ('+z+') '
	else
		if x is null
			x = 0
		if y is null
			y = 0
		if z is null
			z = 0
		value = 'translate3d('+x+','+y+','+z+') '
		
	return unquote(value)
*/

flickity()
	.flickity-enabled
		position relative
		&:focus
			outline 0
		
	.flickity-viewport
		overflow hidden
		position relative
		height 100%
		
	.flickity-slider
		position absolute
		width 100%
		height 100%
		
	.flickity-enabled.is-draggable
		-webkit-tap-highlight-color transparent
		tap-highlight-color transparent
		user-select none
		
		& .flickity-viewport
			cursor move
			cursor -webkit-grab
			cursor grab
		
		& .flickity-viewport.is-pointer-down
			cursor -webkit-grabbing
			cursor grabbing
		
	.flickity-prev-next-button
		absolute top 50%
		width 44px
		height 44px
		border none
		border-radius 50%
		background #fff
		background hsla(0,0%,100%,.75)
		cursor pointer
		transform translateY(-50%)
		&:hover
			background #fff
		&:focus
			outline 0
			box-shadow 0 0 0 5px #09F
		
	.flickity-prev-next-button
		&:active
			opacity .6
		&.previous
			left 10px
		&.next
			right 10px
		&:disabled
			opacity:.3
			cursor:auto
		svg
			absolute left 20% top 20%
			size 60%
		& .arrow
			fill:#333
			
	.flickity-rtl
		.flickity-prev-next-button
			&.previous
				left auto
				right 10px
			&.next
				right auto
				left 10px
		.flickity-page-dots
				direction:rtl
		
	.flickity-page-dots
		position absolute
		width 100%
		bottom -25px
		padding 0
		margin 0
		list-style none
		text-align center
		line-height 1
		.dot
			display inline-block
			width 10px
			height 10px
			margin 0 8px
			background #333
			border-radius 50%
			opacity .25
			cursor pointer
		
			&.is-selected
				opacity 1
			